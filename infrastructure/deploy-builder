#!/bin/env node

import { promises as fs } from 'fs';
import { exec as oldExec } from 'child_process';

const isWindows = process.platform === 'win32'
const shell = isWindows ? 'cmd.exe' : '/bin/bash';

async function exec(cmd) {
    return new Promise((resolve, reject) => {
        const spawned = oldExec(cmd, { shell });
        spawned.stdout.on('data', data => process.stdout.write(data));
        spawned.stderr.on('data', data => process.stderr.write(data));
        spawned.on('close', code => {
            if (code) {
                reject(`Process exited with code: ${code}`);
            } else {
                resolve();
            }
        })
    });
}

const rawData = await fs.readFile('builder-vars.json');
const data = JSON.parse(rawData.toString());
const tag = `${data.buildRepo}:latest`;

process.chdir("./builder-image");
await exec(`aws ecr get-login-password --region ${data.awsRegion} | docker login --username AWS --password-stdin ${data.ecrHost}`);
await exec(`docker build --platform linux/arm64 -t ${tag} --push .`);

process.exit(0);
